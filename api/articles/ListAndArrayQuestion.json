{"title":"List和Array 中遇到的问题。","uid":"078f7e9be7e83a4bdc132dd63c7d9a7c","slug":"ListAndArrayQuestion","date":"2022-09-23T02:41:39.000Z","updated":"2022-09-25T14:54:21.179Z","comments":true,"path":"api/articles/ListAndArrayQuestion.json","keywords":null,"cover":[],"content":"<h1 id=\"List和Array-中遇到的问题。\"><a href=\"#List和Array-中遇到的问题。\" class=\"headerlink\" title=\"List和Array 中遇到的问题。\"></a>List和Array 中遇到的问题。</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>主要介绍Array 和List 互相转换时遇到的问题，以及怎么解决</p></blockquote>\n<h2 id=\"Arrays-asList转换的坑\"><a href=\"#Arrays-asList转换的坑\" class=\"headerlink\" title=\"Arrays.asList转换的坑\"></a>Arrays.asList转换的坑</h2><h3 id=\"问题1-基本类型数组转换List会出现转换出的结果跟想要的不一致\"><a href=\"#问题1-基本类型数组转换List会出现转换出的结果跟想要的不一致\" class=\"headerlink\" title=\"问题1:基本类型数组转换List会出现转换出的结果跟想要的不一致\"></a>问题1:基本类型数组转换List会出现转换出的结果跟想要的不一致</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们进行数组转List的操作时，通常我们会使用Arrays.asList来进行转换。</p>\n<p>但是在转换基本类型的数组的时候，却出现转换的结果和我们想象的不一致。</p></blockquote>\n<p>例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void Test1()&#123;\n  int[] arr &#x3D; &#123;1, 2, 3&#125;;\n  List list &#x3D; Arrays.asList(arr);\n  System.out.println(list.size());\n  &#x2F;&#x2F;1\n&#125;</code></pre>\n\n<p>我们的目的是想生成一个长度为3的List,可是现在只生成了长度为1 的List</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SafeVarargs\n@SuppressWarnings(&quot;varargs&quot;)\npublic static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;\n  return new ArrayList&lt;&gt;(a);\n&#125;</code></pre>\n\n<h4 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><img src=\"listandarrayquestion/image-20220920093518587.png\" class title=\"This is an test image\">\n\n<p>通过断点我们可以看到把 int数组 整体作为一个对象,返回了一个 List&lt;int[]&gt;</p>\n<p><u><strong>这个源码的截图看出来的问题就是的这里出入的参数类型是泛型T，这就是问题的根源。这个T表示派生自Object类的任何类，比如String,Integer,Double等等。泛型只能是引用类型,基础类型int、double等不是引用类型，但是数组是引用类型，那么这个参数泛型T只能是数组的引用类型。所以我们传基础类数组的时候，就只会认为你只传一个值。</strong></u></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p><strong>方案一：Java8以上，利用Arrays.stream(arr).boxed()将装箱为Integer数组</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List collect &#x3D; Arrays.stream(arr).boxed().collect(Collectors.toList()); \nSystem.out.println(collect.size()); \nSystem.out.println(collect.get(0).getClass()); \n&#x2F;&#x2F; 3 \n&#x2F;&#x2F; class java.lang.Integer</code></pre>\n\n<p><strong>方案二：声明数组的时候，声明类型改为包装类型</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Integer[] integerArr &#x3D; &#123;1, 2, 3&#125;; \nList integerList &#x3D; Arrays.asList(integerArr); \nSystem.out.println(integerList.size());\nSystem.out.println(integerList.get(0).getClass()); \n&#x2F;&#x2F; 3 \n&#x2F;&#x2F; class java.lang.Integer</code></pre>\n\n<h3 id=\"问题2：-Arrays-asList返回的List不支持增删操作\"><a href=\"#问题2：-Arrays-asList返回的List不支持增删操作\" class=\"headerlink\" title=\"问题2： Arrays.asList返回的List不支持增删操作\"></a>问题2： Arrays.asList返回的List不支持增删操作</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用Arrays.asList 返回的List 进行增加、刪除操作时会报错。</p></blockquote>\n<p>例如：</p>\n<p>1.迭代器删除</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String[] arr &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;4&quot;&#125;;\nList&lt;String&gt; strings &#x3D; Arrays.asList(arr);\n&#x2F;&#x2F; arr[2] &#x3D; &quot;4&quot;;\nSystem.out.println(strings);\nIterator&lt;String&gt; iterator &#x3D; strings.iterator();\nwhile (iterator.hasNext()) &#123;\n  if (&quot;4&quot;.equals(iterator.next())) &#123;\n    iterator.remove();\n  &#125;\n&#125;\n\n&#x2F;&#x2F;[1, 2, 4]\n&#x2F;&#x2F;Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException: remove\n\t&#x2F;&#x2F;at java.base&#x2F;java.util.Iterator.remove(Iterator.java:102)\n\t&#x2F;&#x2F;at com.example.springbootdemo.test.ListTestDemo.main(ListTestDemo.java:21)</code></pre>\n\n<p>2.调用remove 和add 方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\nString[] arr &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;4&quot;&#125;;\nList&lt;String&gt; strings &#x3D; Arrays.asList(arr);\nstrings.remove(&quot;4&quot;);\n&#x2F;&#x2F;Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException: remove\n\t&#x2F;&#x2F;at java.base&#x2F;java.util.Iterator.remove(Iterator.java:102)\n\t&#x2F;&#x2F;at java.base&#x2F;java.util.AbstractCollection.remove(AbstractCollection.java:283)\n\t&#x2F;&#x2F;at com.example.springbootdemo.test.ListTestDemo.main(ListTestDemo.java:25)\n\nstrings.add(&quot;3&quot;);\n&#x2F;&#x2F;Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException\n\t&#x2F;&#x2F;at java.base&#x2F;java.util.AbstractList.add(AbstractList.java:153)\n\t&#x2F;&#x2F;at java.base&#x2F;java.util.AbstractList.add(AbstractList.java:111)\n\t&#x2F;&#x2F;at com.example.springbootdemo.test.ListTestDemo.main(ListTestDemo.java:26)\n</code></pre>\n\n<h4 id=\"问题原因-1\"><a href=\"#问题原因-1\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><p>根据源码可知:Arrays.asList(arr); 方法返回的List是 自己内部定义的内部类ArrayList<E>,继承AbstractList<E> 类。但是并没有实现add和remove方法。所以直接调用的是AbstractList 类中的方法，直接抛出异常</E></E></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;Arrays.class\n\n@SafeVarargs\n@SuppressWarnings(&quot;varargs&quot;)\npublic static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;\n  return new ArrayList&lt;&gt;(a);\n&#125;\n\n&#x2F;**\n     * @serial include\n     *&#x2F;\nprivate static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\n  implements RandomAccess, java.io.Serializable\n&#123;\n  @java.io.Serial\n  private static final long serialVersionUID &#x3D; -2764017481108945198L;\n  @SuppressWarnings(&quot;serial&quot;) &#x2F;&#x2F; Conditionally serializable\n  private final E[] a;\n\n  ArrayList(E[] array) &#123;\n    a &#x3D; Objects.requireNonNull(array);\n  &#125;\n\n  @Override\n  public int size() &#123;\n    return a.length;\n  &#125;\n\n  @Override\n  public Object[] toArray() &#123;\n    return Arrays.copyOf(a, a.length, Object[].class);\n  &#125;\n\n  @Override\n  @SuppressWarnings(&quot;unchecked&quot;)\n  public &lt;T&gt; T[] toArray(T[] a) &#123;\n    ...\n  &#125;\n\n  @Override\n  public E get(int index) &#123;\n    return a[index];\n  &#125;\n\n  @Override\n  public E set(int index, E element) &#123;\n    E oldValue &#x3D; a[index];\n    a[index] &#x3D; element;\n    return oldValue;\n  &#125;\n\n  @Override\n  public int indexOf(Object o) &#123;\n    ...\n  &#125;\n\n  @Override\n  public boolean contains(Object o) &#123;\n    return indexOf(o) &gt;&#x3D; 0;\n  &#125;\n\n  @Override\n  public Spliterator&lt;E&gt; spliterator() &#123;\n    return Spliterators.spliterator(a, Spliterator.ORDERED);\n  &#125;\n\n  @Override\n  public void forEach(Consumer&lt;? super E&gt; action) &#123;\n    ...\n  &#125;\n\n  @Override\n  public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;\n    ...\n  &#125;\n\n  @Override\n  public void sort(Comparator&lt;? super E&gt; c) &#123;\n    Arrays.sort(a, c);\n  &#125;\n\n  @Override\n  public Iterator&lt;E&gt; iterator() &#123;\n    return new ArrayItr&lt;&gt;(a);\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; AbstractList.class\npublic abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt; &#123;\n  public void add(int index, E element) &#123;\n \t\tthrow new UnsupportedOperationException();\n  &#125;\n  public E remove(int index) &#123;\n  \tthrow new UnsupportedOperationException();\n  &#125;\n&#125;\n</code></pre>\n\n<p>同理。Iterator 类也是自己的内部类，也没有实现Iterator<E>中的remove方法</E></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;Arrays.class\n\nprivate static class ArrayItr&lt;E&gt; implements Iterator&lt;E&gt; &#123;\n  private int cursor;\n  private final E[] a;\n\n  ArrayItr(E[] a) &#123;\n    this.a &#x3D; a;\n  &#125;\n\n  @Override\n  public boolean hasNext() &#123;\n    return cursor &lt; a.length;\n  &#125;\n\n  @Override\n  public E next() &#123;\n    int i &#x3D; cursor;\n    if (i &gt;&#x3D; a.length) &#123;\n      throw new NoSuchElementException();\n    &#125;\n    cursor &#x3D; i + 1;\n    return a[i];\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;Iterator.class\n\npublic interface Iterator&lt;E&gt; &#123;\n  default void remove() &#123;\n \t throw new UnsupportedOperationException(&quot;remove&quot;);\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>重新new 一个ArrayList来接收。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String[] arr &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;4&quot;&#125;;\nList&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(arr));\n\nSystem.out.println(&quot;初始值:&quot; + strings);\nIterator&lt;String&gt; iterator &#x3D; strings.iterator();\nwhile (iterator.hasNext()) &#123;\n  if (&quot;4&quot;.equals(iterator.next())) &#123;\n    iterator.remove();\n  &#125;\n&#125;\nSystem.out.println(&quot;删除元素4:&quot; + strings);\nstrings.remove(&quot;2&quot;);\nSystem.out.println(&quot;删除元素2&quot; + strings);\nstrings.add(&quot;3&quot;);\nSystem.out.println(&quot;增加元素3&quot; + strings);\n\n初始值:[1, 2, 4]\n删除元素4:[1, 2]\n删除元素2[1]\n增加元素3[1, 3]</code></pre>\n\n<h3 id=\"问题3-对原始数组的修改会影响到我们获得的那个List\"><a href=\"#问题3-对原始数组的修改会影响到我们获得的那个List\" class=\"headerlink\" title=\"问题3: 对原始数组的修改会影响到我们获得的那个List\"></a>问题3: 对原始数组的修改会影响到我们获得的那个List</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>完成字符串数组转换为List之后，我们将字符串数组的第三个对象的值修改为4，发现List也发生了变化。</p></blockquote>\n<p>例如:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String[] arr &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;;\nList&lt;String&gt; strings &#x3D; Arrays.asList(arr);\nSystem.out.println(&quot;原始值:&quot; + strings);\narr[2] &#x3D; &quot;4&quot;;\nSystem.out.println(&quot;修改后的值:&quot; + strings);\n\n&#x2F;&#x2F;原始值:[1, 2, 3]\n&#x2F;&#x2F;修改后的值:[1, 2, 4]</code></pre>\n\n<h4 id=\"问题原因-2\"><a href=\"#问题原因-2\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><p>根据源码可知。asList中创建了 ArrayList，但是他直接引用了原本的数组对象。所以只要原本的数组对象一发生变化，List也跟着变化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;Arrays.class\n\n@SafeVarargs\n@SuppressWarnings(&quot;varargs&quot;)\npublic static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;\n  return new ArrayList&lt;&gt;(a);\n&#125;\n\n&#x2F;**\n     * @serial include\n     *&#x2F;\nprivate static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;\n  implements RandomAccess, java.io.Serializable\n&#123;\n  @java.io.Serial\n    private static final long serialVersionUID &#x3D; -2764017481108945198L;\n  @SuppressWarnings(&quot;serial&quot;) &#x2F;&#x2F; Conditionally serializable\n  private final E[] a;\n\n  ArrayList(E[] array) &#123;\n    a &#x3D; Objects.requireNonNull(array);\n  &#125;\n  ...\n&#125;\npublic static &lt;T&gt; T requireNonNull(T obj) &#123;\n  if (obj &#x3D;&#x3D; null)\n    throw new NullPointerException();\n  return obj;\n&#125;</code></pre>\n\n<p>所以在使用时一定要注意修改数组时会导致List的修改。</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>重新new 一个ArrayList来接收。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String[] arr &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;;\nList&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(arr));\nSystem.out.println(&quot;原始值:&quot; + strings);\narr[2] &#x3D; &quot;4&quot;;\nSystem.out.println(&quot;修改后的值:&quot; + strings);\n&#x2F;&#x2F;原始值:[1, 2, 3]\n&#x2F;&#x2F;修改后的值:[1, 2, 3]\n</code></pre>\n\n<h2 id=\"ArrayList中-subList-方法的坑\"><a href=\"#ArrayList中-subList-方法的坑\" class=\"headerlink\" title=\"ArrayList中 subList 方法的坑\"></a>ArrayList中 subList 方法的坑</h2><h3 id=\"问题4：①ArrayList中的-subList-强转-ArrayList-导致异常。②并且对于SubList-的所有操作最终会反映到原列表上。\"><a href=\"#问题4：①ArrayList中的-subList-强转-ArrayList-导致异常。②并且对于SubList-的所有操作最终会反映到原列表上。\" class=\"headerlink\" title=\"问题4：①ArrayList中的 subList 强转 ArrayList 导致异常。②并且对于SubList 的所有操作最终会反映到原列表上。\"></a>问题4：①ArrayList中的 subList 强转 ArrayList 导致异常。②并且对于SubList 的所有操作最终会反映到原列表上。</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在阿里巴巴的《JAVA开发手册》中，有关于subList 的规定</p>\n<p>.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常：</p>\n<p>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</p>\n<p>说明：subList() 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 本身，而是 ArrayList 的一个视图，对于</p>\n<p>SubList 的所有操作最终会反映到原列表上。</p></blockquote>\n<p>例如:</p>\n<p>问题4.1：强转subList</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();\nlist.add(&quot;1&quot;);\nlist.add(&quot;2&quot;);\nlist.add(&quot;3&quot;);\nlist.add(&quot;4&quot;);\nSystem.out.println(&quot;初始list:&quot; + list);\nList&lt;String&gt; strings &#x3D; (ArrayList)list.subList(0, 2);\n&#x2F;&#x2F;初始list:[1, 2, 3, 4]\n&#x2F;&#x2F;Exception in thread &quot;main&quot; java.lang.ClassCastException: class java.util.ArrayList$SubList cannot be &#x2F;&#x2F;cast to class java.util.ArrayList (java.util.ArrayList$SubList and java.util.ArrayList are in module &#x2F;&#x2F;java.base of loader &#39;bootstrap&#39;)\n&#x2F;&#x2F;\tat com.example.springbootdemo.test.ListTestDemo.main(ListTestDemo.java:18)</code></pre>\n\n<p>问题4.2：修改SubList</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();\nlist.add(&quot;1&quot;);\nlist.add(&quot;2&quot;);\nlist.add(&quot;3&quot;);\nlist.add(&quot;4&quot;);\nSystem.out.println(&quot;初始list:&quot; + list);\nList&lt;String&gt; strings &#x3D; list.subList(0, 2);\nSystem.out.println(&quot;截取过的list:&quot; + strings);\nstrings.add(&quot;5&quot;);\n\nSystem.out.println(&quot;初始list:&quot; + list);\nSystem.out.println(&quot;截取过的list:&quot; + strings);\n\n&#x2F;&#x2F;初始list:[1, 2, 3, 4]\n&#x2F;&#x2F;截取过的list:[1, 2]\n&#x2F;&#x2F;初始list:[1, 2, 5, 3, 4]\n&#x2F;&#x2F;截取过的list:[1, 2, 5]\n</code></pre>\n\n<h4 id=\"问题原因-3\"><a href=\"#问题原因-3\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><p> SubList 是一个继承 AbstractList 的内部类，在 SubList 的构建函数中的将 List 中的部分属性直接赋予给自己。</p>\n<p>SubList 没有创建一个新的 List，而是直接引用了原来的 List(this.root &#x3D; root)，并根据offset和size来展示SubList的内容。</p>\n<p><strong>所以 subList 方法不能直接转成 ArrayList，他只是ArrayList的内部类，没有其他的关系。</strong></p>\n<p><strong>因为是引用的关系，所以对subList产生的List做出结构型修改，操作会反应到原来的List上。</strong></p>\n<p><strong>如果修改原来的List则会抛出异常ConcurrentModificationException</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;arrayList.class\n\npublic List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;\n  subListRangeCheck(fromIndex, toIndex, size);\n  return new SubList&lt;&gt;(this, fromIndex, toIndex);\n&#125;\n\nprivate static class SubList&lt;E&gt; extends AbstractList&lt;E&gt; implements RandomAccess &#123;\n  private final ArrayList&lt;E&gt; root;\n  private final SubList&lt;E&gt; parent;\n  private final int offset;\n  private int size;\n\n  &#x2F;**\n         * Constructs a sublist of an arbitrary ArrayList.\n         *&#x2F;\n  public SubList(ArrayList&lt;E&gt; root, int fromIndex, int toIndex) &#123;\n    this.root &#x3D; root;\n    this.parent &#x3D; null;\n    this.offset &#x3D; fromIndex;\n    this.size &#x3D; toIndex - fromIndex;\n    this.modCount &#x3D; root.modCount;\n  &#125;\n  ...\n&#125;</code></pre>\n\n<h4 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h4><p>在操作SubList的时候，new一个新的ArrayList来接收创建subList结果的拷贝</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List strings &#x3D; new ArrayList(list.subList(0, 2));</code></pre>\n\n<h3 id=\"问题5-修改原列表会抛出异常。\"><a href=\"#问题5-修改原列表会抛出异常。\" class=\"headerlink\" title=\"问题5:修改原列表会抛出异常。\"></a>问题5:修改原列表会抛出异常。</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>修改原列表会更改list的modCount属性的值</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();\nlist.add(&quot;1&quot;);\nlist.add(&quot;2&quot;);\nlist.add(&quot;3&quot;);\nlist.add(&quot;4&quot;);\nSystem.out.println(&quot;初始list:&quot; + list);\nList&lt;String&gt; strings &#x3D; list.subList(0, 2);\nSystem.out.println(&quot;截取过的list:&quot; + strings);\nstrings.add(&quot;5&quot;);\nlist.add(&quot;6&quot;);\nSystem.out.println(&quot;初始list:&quot; + list);\nSystem.out.println(&quot;截取过的list:&quot; + strings);\n\n&#x2F;*\n初始list:[1, 2, 3, 4]\n截取过的list:[1, 2]\n初始list:[1, 2, 5, 3, 4, 6]\nException in thread &quot;main&quot; java.util.ConcurrentModificationException\n\tat java.base&#x2F;java.util.ArrayList$SubList.checkForComodification(ArrayList.java:1415)\n\tat java.base&#x2F;java.util.ArrayList$SubList.listIterator(ArrayList.java:1284)\n\tat java.base&#x2F;java.util.AbstractList.listIterator(AbstractList.java:311)\n\tat java.base&#x2F;java.util.ArrayList$SubList.iterator(ArrayList.java:1280)\n\tat java.base&#x2F;java.util.AbstractCollection.toString(AbstractCollection.java:449)\n\tat java.base&#x2F;java.lang.StringConcatHelper.stringOf(StringConcatHelper.java:453)\n\tat java.base&#x2F;java.lang.StringConcatHelper.simpleConcat(StringConcatHelper.java:408)\n\tat com.example.springbootdemo.test.ListTestDemo.main(ListTestDemo.java:23)\n*&#x2F;</code></pre>\n\n<h4 id=\"问题原因-4\"><a href=\"#问题原因-4\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><p>原来的List插入了一个新元素，导致this.modCount不第一次保存的不一致则抛出异常</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void checkForComodification() &#123;\n  if (root.modCount !&#x3D; modCount)\n    throw new ConcurrentModificationException();\n&#125;</code></pre>\n\n<h4 id=\"解决方案-4\"><a href=\"#解决方案-4\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h4><p>在操作SubList的时候，new一个新的ArrayList来接收创建subList结果的拷贝</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List strings &#x3D; new ArrayList(list.subList(0, 2));</code></pre>\n\n<h3 id=\"问题6-ArrayList中的subList造成OOM\"><a href=\"#问题6-ArrayList中的subList造成OOM\" class=\"headerlink\" title=\"问题6: ArrayList中的subList造成OOM\"></a>问题6: ArrayList中的subList造成OOM</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在上面的例子中，我们知道了subList所产生的List，其实是对原来List对象的引用</p>\n<p>这个产生的List只是原来List对象的视图，也就是说虽然值切片获取了一小段数据，但是原来的List对象却得不到回收，这个原来的List对象可能是一个很大的对象</p>\n<p>为了方便我们测试，将vm调整一下 -Xms20m -Xmx40m</p></blockquote>\n<img src=\"listandarrayquestion/image-20220920093518587.png\" class title=\"This is an test image\">\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List data &#x3D; new ArrayList();\nIntStream.range(0, 1000).forEach(i -&gt; &#123;\n  List&lt;Integer&gt; collect &#x3D; IntStream.range(0, 100000).boxed().collect(Collectors.toList());\n  data.add(collect.subList(0, 1));\n&#125;);\nSystem.out.println(data);\n\n&#x2F;&#x2F;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</code></pre>\n\n<h4 id=\"问题原因-5\"><a href=\"#问题原因-5\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h4><p>出现OOM的原因，循环1000次创建了1000个具有10万个元素的List</p>\n<p>因为始终被collect.subList(0, 1)强引用，得不到回收</p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><ol>\n<li>在subList方法返回SubList，重新使用new ArrayList，来构建一个独立的ArrayList</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List data &#x3D; new ArrayList();\nIntStream.range(0, 1000).forEach(i -&gt; &#123;\nList&lt;Integer&gt; collect &#x3D; IntStream.range(0, 100000).boxed().collect(Collectors.toList());\nList list &#x3D; new ArrayList&lt;&gt;(collect.subList(0, 1));\n&#x2F;&#x2F;  List list &#x3D; collect.stream().skip(0).limit(1).collect(Collectors.toList());\ndata.add(list);\n&#125;);\nSystem.out.println(data);</code></pre>\n\n<ol>\n<li>利用Java8的Stream中的skip和limit来达到切片的目的</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">List list &#x3D; collect.stream().skip(0).limit(1).collect(Collectors.toList());</code></pre>\n\n<p>在这里我们可以看到，只要用一个新的容器来装结果，就可以切断与原始List的关系</p>\n","feature":true,"text":"List和Array 中遇到的问题。前言 主要介绍Array 和List 互相转换时遇到的问题，以及怎么解决 Arrays.asList转换的坑问题1:基本类型数组转换List会出现转换出的结果跟想要的不一致 我们进行数组转List的操作时，通常我们会使用Arrays.asLis...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":1,"path":"api/categories/JAVA.json"},{"name":"List","slug":"JAVA/List","count":1,"path":"api/categories/JAVA/List.json"}],"tags":[{"name":"List","slug":"List","count":1,"path":"api/tags/List.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#List%E5%92%8CArray-%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82\"><span class=\"toc-text\">List和Array 中遇到的问题。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Arrays-asList%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%9D%91\"><span class=\"toc-text\">Arrays.asList转换的坑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%981-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2List%E4%BC%9A%E5%87%BA%E7%8E%B0%E8%BD%AC%E6%8D%A2%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C%E8%B7%9F%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%8D%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">问题1:基本类型数组转换List会出现转换出的结果跟想要的不一致</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%982%EF%BC%9A-Arrays-asList%E8%BF%94%E5%9B%9E%E7%9A%84List%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A2%9E%E5%88%A0%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">问题2： Arrays.asList返回的List不支持增删操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0-1\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1\"><span class=\"toc-text\">解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%983-%E5%AF%B9%E5%8E%9F%E5%A7%8B%E6%95%B0%E7%BB%84%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%88%B0%E6%88%91%E4%BB%AC%E8%8E%B7%E5%BE%97%E7%9A%84%E9%82%A3%E4%B8%AAList\"><span class=\"toc-text\">问题3: 对原始数组的修改会影响到我们获得的那个List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0-2\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-2\"><span class=\"toc-text\">解决方案</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ArrayList%E4%B8%AD-subList-%E6%96%B9%E6%B3%95%E7%9A%84%E5%9D%91\"><span class=\"toc-text\">ArrayList中 subList 方法的坑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%984%EF%BC%9A%E2%91%A0ArrayList%E4%B8%AD%E7%9A%84-subList-%E5%BC%BA%E8%BD%AC-ArrayList-%E5%AF%BC%E8%87%B4%E5%BC%82%E5%B8%B8%E3%80%82%E2%91%A1%E5%B9%B6%E4%B8%94%E5%AF%B9%E4%BA%8ESubList-%E7%9A%84%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C%E6%9C%80%E7%BB%88%E4%BC%9A%E5%8F%8D%E6%98%A0%E5%88%B0%E5%8E%9F%E5%88%97%E8%A1%A8%E4%B8%8A%E3%80%82\"><span class=\"toc-text\">问题4：①ArrayList中的 subList 强转 ArrayList 导致异常。②并且对于SubList 的所有操作最终会反映到原列表上。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0-3\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-3\"><span class=\"toc-text\">解决方案:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%985-%E4%BF%AE%E6%94%B9%E5%8E%9F%E5%88%97%E8%A1%A8%E4%BC%9A%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E3%80%82\"><span class=\"toc-text\">问题5:修改原列表会抛出异常。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0-4\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-4\"><span class=\"toc-text\">解决方案:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%986-ArrayList%E4%B8%AD%E7%9A%84subList%E9%80%A0%E6%88%90OOM\"><span class=\"toc-text\">问题6: ArrayList中的subList造成OOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0-5\"><span class=\"toc-text\">问题原因:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A\"><span class=\"toc-text\">解决方案：</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"linux下常用Redis命令","uid":"3e82e95d63c1de4d51c37731b5b54831","slug":"linux-redis","date":"2019-06-04T02:20:01.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/linux-redis.json","keywords":null,"cover":null,"text":"1. 连接redis redis-cli -h host -p port -a password redis-cli -h r-bp1e481.redis.rds.aliyuncs.com -p 6379 -a password 有时候会有中文乱码。要在 redis-cli 后面...","link":"","photos":[],"count_time":{"symbolsCount":205,"symbolsTime":"1 mins."},"categories":[{"name":"LINUX","slug":"LINUX","count":2,"path":"api/categories/LINUX.json"}],"tags":[{"name":"LINUX","slug":"LINUX","count":2,"path":"api/tags/LINUX.json"},{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":true}}