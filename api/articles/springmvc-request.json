{"title":"SpringMVC之请求参数的获取方式","uid":"c7433ee36363ab590f7e0ac5e549f564","slug":"springmvc-request","date":"2019-05-15T09:33:12.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/springmvc-request.json","keywords":null,"cover":null,"content":"<p><a href=\"https://blog.hhui.top/hexblog/2018/01/04/SpringMVC%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/#top\">原文链接</a></p>\n<h3 id=\"I-GET请求参数获取\"><a href=\"#I-GET请求参数获取\" class=\"headerlink\" title=\"I. GET请求参数获取\"></a>I. GET请求参数获取</h3><p>get请求参数，一般都是直接挂在请求的url上，所以获取这些参数还是比较简单的</p>\n<h4 id=\"1-通过-HttpServletRequest获取参数\"><a href=\"#1-通过-HttpServletRequest获取参数\" class=\"headerlink\" title=\"1. 通过 HttpServletRequest获取参数\"></a>1. 通过 HttpServletRequest获取参数</h4><p>这个可以说是最基本最常见的的方式了，  <span style=\"text-shadow: 5px 5px 5px #00FF00;\">javax.servlet.ServletRequest#getParameter</span>来获取对应的参数 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\n@RequestMapping(path &#x3D; &quot;webs&#x2F;demo&quot;)\npublic class DemoController &#123;\n\n    @RequestMapping(path &#x3D; &quot;req1&quot;)\n    public String req1(HttpServletRequest request) &#123;\n        String user &#x3D; request.getParameter(&quot;user&quot;);\n        String password &#x3D; request.getParameter(&quot;password&quot;);\n        return &quot;req1 user: &quot; + user + &quot; pwd: &quot; + password;\n    &#125;\n&#125;</code></pre>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">根据上面暴露的接口，我们测试的case就很简单了\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1?user&#x3D;小灰灰Blog&amp;password&#x3D;123456\n## 输出  req1 user: 小灰灰Blog pwd: 123456\n\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1?user&#x3D;小灰灰Blog\n## 输出  req1 user: 小灰灰Blog pwd: null</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF\">说明:</span></p>\n<ul>\n<li>这是一个最基本的获取参数的方式，get，post请求都适用的，通常在filter,intercepter中也是可以通过HttpServletRequest对象来获取请求参数</li>\n<li>除了获取常见的请求参数之外，HttpServletRequest可以获取请求头的完整信息</li>\n<li>在一次请求的生命周期内，可以通过下面的方式获取Request对象(当然也可以获取response对象)</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">HttpServletRequest httpServletRequest &#x3D; ((ServletRequestAttributes) \n    RequestContextHolder.getRequestAttributes()).getRequest();</code></pre>\n<h4 id=\"2-直接方法参数获取\"><a href=\"#2-直接方法参数获取\" class=\"headerlink\" title=\"2. 直接方法参数获取\"></a>2. 直接方法参数获取</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(path &#x3D; &quot;req2&quot;)\npublic String req2(String user, String password) &#123;\n    return &quot;req2 user: &quot; + user + &quot; pwd: &quot; + password;\n&#125;</code></pre>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">请求验证\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?user&#x3D;%E5%B0%8F%E7%81%B0%E7%81%B0Blog&amp;password&#x3D;123456\n## 输出： req2 user: 小灰灰Blog pwd: 123456\n\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?password&#x3D;123456\n## 输出： req2 user: null pwd: 123456\n\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?password&#x3D;123456&amp;User&#x3D;blog\n## 输出： req2 user: null pwd: 123456</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733\">注意:</span></p>\n<ul>\n<li>上面这种使用方式，相当于直接将url参数映射到了Controller方法的参数上了</li>\n<li>方法参数名必须和url参数名完全一致（区分大小写）</li>\n<li>顺序无关</li>\n<li>若参数没传，则默认为null</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一个疑问 <br><br>上面的demo中Controller的方法参数都是String还好，如果将password改成int，会出现什么情况<br></p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(path &#x3D; &quot;req2&quot;)\npublic String req2(String user, int password) &#123;\n    return &quot;req2 user: &quot; + user + &quot; pwd: &quot; + password;\n&#125;</code></pre>\n<p>实际测试</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case1 \nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?password&#x3D;123456&amp;user&#x3D;blog\n## 输出： req2 user: blog pwd: 123456\n\n\n# case 2\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?password2&#x3D;123456&amp;user&#x3D;blog\n## 输出: 报错, Optional int parameter &#39;password&#39; is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type\n\n\n# case 3\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?password&#x3D;abc&amp;user&#x3D;blog\n## 输出：报错, &quot;Failed to convert value of type &#39;java.lang.String&#39; to required type &#39;int&#39;; nested exception is java.lang.NumberFormatException: For input string: &quot;abc&quot;&quot;\n</code></pre>\n<p><span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF\">说明:</span></p>\n<ul>\n<li>如果请求参数与方法参数类型不一致，会抛出转换异常</li>\n<li>如果方法参数为非封装基本类型，则url参数必须存在，否则报错</li>\n</ul>\n<h4 id=\"3-RequestParam注解方式获取请求参数\"><a href=\"#3-RequestParam注解方式获取请求参数\" class=\"headerlink\" title=\"3. RequestParam注解方式获取请求参数\"></a>3. RequestParam注解方式获取请求参数</h4><p>通过@RequestParam注解获取参数的方式和上面的一种比较类似</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(path &#x3D; &quot;req3&quot;, method &#x3D; RequestMethod.GET)\npublic String req3(@RequestParam(&quot;user&quot;) String username,\n                   @RequestParam(&quot;password&quot;) String pwd) &#123;\n    return &quot;req3 user: &quot; + username + &quot; pwd: &quot; + pwd;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case1 \nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req3?password&#x3D;123456&amp;user&#x3D;blog\n## 输出: req3 user: blog pwd: 123456\n\n\n# case2\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req3?password&#x3D;123456\n## 输出：报错， Required String parameter &#39;user&#39; is not presen</code></pre>\n<p><span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF\">说明:</span></p>\n<ul>\n<li>不指定注解的name或value属性时，等同于第二种使用姿势</li>\n<li>注解的name属性或value属性，用实际的参数名来指定</li>\n<li>controller的参数名与url参数名没有强关联（区别第二种方式）</li>\n<li>参数类型需要保证一致（通第二种方式）</li>\n<li>如果url参数可选，请设置require属性为false，如下</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestParam(name &#x3D; &quot;user&quot;,  required &#x3D; false) String username</code></pre>\n\n<h4 id=\"4-Bean方式获取参数\"><a href=\"#4-Bean方式获取参数\" class=\"headerlink\" title=\"4. Bean方式获取参数\"></a>4. Bean方式获取参数</h4><p>对于请求参数比较复杂的情况下，我比较喜欢这种使用姿势，管理起来方便简单</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic static class UserDO &#123;\n    String user;\n    String password;\n&#125;\n\n@RequestMapping(path &#x3D; &quot;req4&quot;, method &#x3D; RequestMethod.GET)\npublic String req4(UserDO userDO) &#123;\n    return &quot;req4 userDO: &quot; + userDO;\n&#125;</code></pre>\n<p>测试case</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case1\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4?password&#x3D;123456&amp;user&#x3D;%E5%B0%8F%E7%81%B0%E7%81%B0Blog\n## 输出: req4 userDO: DemoController.UserDO(user&#x3D;小灰灰Blog, password&#x3D;123456)\n# case2\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4?password&#x3D;123456\n## 输出: req4 userDO: DemoController.UserDO(user&#x3D;null, password&#x3D;123456)</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF\">说明:</span></p>\n<ul>\n<li>定义一个bean，内部属性和请求参数对应</li>\n<li>允许参数不存在的情况，会使用null代替（所以，尽量不要使用非封装基本类型，否则参数不传时，会抛异常）</li>\n<li>bean的属性，可以根据实际情况指定类型</li>\n</ul>\n<h4 id=\"5-ModelAttribute注解方式\"><a href=\"#5-ModelAttribute注解方式\" class=\"headerlink\" title=\"5. ModelAttribute注解方式\"></a>5. ModelAttribute注解方式</h4><p>@ModelAttribute注解的方法，会优于Controller之前执行，一般更常见于向视图传输数据使用，此处不详细展开，正常来讲，专门的获取参数不太会用这这种方式来玩</p>\n<h4 id=\"6-Path参数\"><a href=\"#6-Path参数\" class=\"headerlink\" title=\"6. Path参数\"></a>6. Path参数</h4><p>Path参数，专指的是请求路径的参数，如</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4?password&#x3D;123456\n上面这个url中，password是我们传统意义上的请求参数，其中path参数则是指其中 req4, demo这种path路径中的一环；对此，最常见的一个case就是常见的博客中,如开源中国的一个博客链接\n\nhttps:&#x2F;&#x2F;my.oschina.net&#x2F;u&#x2F;566591&#x2F;blog&#x2F;1601400\n566591 : 这个参数主要用来区分用户\n1601400 : 这个参数则主要是表示对应的博文\n一般path参数的获取方式如下</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(path &#x3D; &quot;req6&#x2F;&#123;user&#125;&#x2F;info&quot;)\npublic String req6(@PathVariable(name &#x3D; &quot;user&quot;) String user) &#123;\n    return &quot;req6 user: &quot; + user;\n&#125;</code></pre>\n<p>测试case</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case1 \nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req6&#x2F;blog&#x2F;info?user&#x3D;haha\n## 输出：req6 user: blog\n\n# case2\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req6&#x2F;blog?user&#x3D;haha\n## 输出: 404\n\n# case3\nhttp:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req6&#x2F;info?user&#x3D;haha\n## 输出: 404\n</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733\">注意:</span></p>\n<ul>\n<li>path参数的使用，需要确保参数存在且类型匹配</li>\n<li>path参数和url参数不会相互影响</li>\n</ul>\n<h3 id=\"II-POST请求参数获取\"><a href=\"#II-POST请求参数获取\" class=\"headerlink\" title=\"II. POST请求参数获取\"></a>II. POST请求参数获取</h3><p>POST请求参数，更多的是看提交表单参数是否可以获取到，以及如何获取，主要的手段依然是上面几种方式，下面验证下是否ok</p>\n<h4 id=\"1-HttpServletRequest方式获取参数\"><a href=\"#1-HttpServletRequest方式获取参数\" class=\"headerlink\" title=\"1. HttpServletRequest方式获取参数\"></a>1. HttpServletRequest方式获取参数</h4><p>测试case，可以借助curl来实现post请求</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case1 \ncurl -d &quot;user&#x3D;小灰灰Blog&amp;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1&quot;\n## 输出： req1 user: 小灰灰Blog pwd: 123456\n\n# case2\ncurl -d &quot;user&#x3D;小灰灰Blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1?password&#x3D;123456&quot;\n## 输出：req1 user: 小灰灰Blog pwd: 12345\n\n# case3\ncurl -d &quot;user&#x3D;小灰灰Blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1?user&#x3D;greyBlog&quot;\n## 输出：req1 user: greyBlog pwd: null</code></pre>\n<p>curl也可以换成js请求测试方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var formData &#x3D; new FormData();\nformData.append(&quot;user&quot;, &quot;小灰灰Blog&quot;);\n\n$.ajax(&#123;\n  url: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req1?password&#x3D;123456&#39;,\n  type: &#39;post&#39;,\n  cache: false,\n  data: formData,\n  processData: false,\n  contentType: false\n&#125;);</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF\">说明:</span></p>\n<ul>\n<li>对于HttpServletReuqest方式获取参数时，get和post没什么区别</li>\n<li>若url参数和表单参数同名了，测试结果显示使用的是url参数（待确认，当然最好不要这么干）</li>\n</ul>\n<h4 id=\"2-方法参数获取\"><a href=\"#2-方法参数获取\" class=\"headerlink\" title=\"2. 方法参数获取\"></a>2. 方法参数获取</h4><p>几个测试demo如下</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\"># case 1\ncurl -d &quot;user&#x3D;小灰灰Blog&amp;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2&quot;\n## 输出： req2 user: 小灰灰Blog pwd: 123456\n\n# case 2\ncurl -d &quot;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2&quot;\n## 输出：req2 user: null pwd: 123456\n\n# case 3\ncurl -d &quot;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req2?user&#x3D;blog&quot;\n## 输出： req2 user: blog pwd: 123456\n基本上使用姿势和get没什么区别</code></pre>\n\n<h4 id=\"3-RequestParam注解方式\"><a href=\"#3-RequestParam注解方式\" class=\"headerlink\" title=\"3. RequestParam注解方式\"></a>3. RequestParam注解方式</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># case 1\ncurl -d &quot;password&#x3D;123456&amp;user&#x3D;blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req3&quot;\n## 输出： req3 user: blog pwd: 123456\n\n# case 2\ncurl -d &quot;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req3?user&#x3D;blog&quot;\n## 输出： req3 user: blog pwd: 123456\n\n# case 3\ncurl -d &quot;password&#x3D;123456&amp;user&#x3D;blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req3?password&#x3D;900&quot;\n## 输出：req3 user: blog pwd: 900,123456</code></pre>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733\">注意:</span></p>\n<ul>\n<li>和前面的两种方式不同的是，当post表单的参数和url参数同名时，会合并成一个字符串</li>\n</ul>\n<h4 id=\"4-Bean方式\"><a href=\"#4-Bean方式\" class=\"headerlink\" title=\"4. Bean方式\"></a>4. Bean方式</h4><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">## case1 \ncurl -d &quot;password&#x3D;123456&amp;user&#x3D;blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4?password&#x3D;900&quot;\n## 输出 req4 userDO: DemoController.UserDO(user&#x3D;blog, password&#x3D;900,123456)\n\n## case2\ncurl -d &quot;password&#x3D;123456&amp;user&#x3D;blog&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4&quot;\n## 输出 req4 userDO: DemoController.UserDO(user&#x3D;blog, password&#x3D;123456)\n\n## case3\ncurl -d &quot;password&#x3D;123456&quot; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;webs&#x2F;demo&#x2F;req4&quot;\n## 输出 req4 userDO: DemoController.UserDO(user&#x3D;null, password&#x3D;123456)\n这种方式不区分get,post，所以完全复杂的交互接口，完全可以考虑用bean的方式来定义请求参数</code></pre>\n<h4 id=\"5-PathVariable\"><a href=\"#5-PathVariable\" class=\"headerlink\" title=\"5. PathVariable\"></a>5. PathVariable</h4><p>这个没法玩…</p>\n<h3 id=\"III-多媒体上传参数获取\"><a href=\"#III-多媒体上传参数获取\" class=\"headerlink\" title=\"III. 多媒体上传参数获取\"></a>III. 多媒体上传参数获取</h3><p>上传文件的支持，对于传统的spring-mvc来说，可能需要一些添加一些相关配置，不在本文的范畴内，下面默认已经配置好</p>\n<h4 id=\"1-实例支持\"><a href=\"#1-实例支持\" class=\"headerlink\" title=\"1. 实例支持\"></a>1. 实例支持</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(path &#x3D; &#123;&quot;wx&#x2F;upload&quot;, &quot;wx&#x2F;wx&#x2F;upload&quot;&#125;, method &#x3D; &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS&#125;)\n@ResponseBody\npublic String upload(HttpServletRequest request) &#123;\n    MultipartFile file &#x3D; null;\n    if (request instanceof MultipartHttpServletRequest) &#123;\n        file &#x3D; ((MultipartHttpServletRequest) request).getFile(&quot;image&quot;);\n    &#125;\n\n    if (file &#x3D;&#x3D; null) &#123;\n        throw new IllegalArgumentException(&quot;图片不能为空!&quot;);\n    &#125;\n    \n    return &quot;success&quot;;\n&#125;</code></pre>\n<p>简单来说，主要是利用HttpServletRequest来获取上传的文件</p>\n<p> <span style=\"font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733\">注意:</span></p>\n<ul>\n<li>如果接口必须要求上传文件，可以直接把参数声明为 MultipartHttpServletRequest， 此时调用方如果不传参数，会被异常拦截（可以通过@ControllerAdvice来拦截全局异常）</li>\n<li>如果可以不上传文件，则可以用上面的这种猥琐姿势，内部进行判断</li>\n<li>((MultipartHttpServletRequest) request).getFile(xxx)来获取指定名的上传文件</li>\n</ul>\n<h3 id=\"IV-小结\"><a href=\"#IV-小结\" class=\"headerlink\" title=\"IV. 小结\"></a>IV. 小结</h3><h4 id=\"1-五种获取参数的姿势\"><a href=\"#1-五种获取参数的姿势\" class=\"headerlink\" title=\"1. 五种获取参数的姿势\"></a>1. 五种获取参数的姿势</h4><table>\n<thead>\n<tr>\n<th align=\"left\">方式</th>\n<th align=\"left\">注意事项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HttpServletRequest获取参数</td>\n<td align=\"left\">最常见通用</td>\n</tr>\n<tr>\n<td align=\"left\">方法参数与请求参数同名</td>\n<td align=\"left\">注意参数名统一，注意类型一致，尽量不用非包装基本类型</td>\n</tr>\n<tr>\n<td align=\"left\">@RequestParam注解</td>\n<td align=\"left\">同上，可注解内指定http参数名</td>\n</tr>\n<tr>\n<td align=\"left\">Bean方式</td>\n<td align=\"left\">定义一个bean，会将同名的http参数赋值进去，推荐</td>\n</tr>\n<tr>\n<td align=\"left\">@PathVariable 注解</td>\n<td align=\"left\">请求url参数</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-传文件使用姿势\"><a href=\"#2-传文件使用姿势\" class=\"headerlink\" title=\"2. 传文件使用姿势\"></a>2. 传文件使用姿势</h4><ul>\n<li>使用MultipartHttpServletRequest来获取上传的文件，当然也可以获取基本的请求参数</li>\n</ul>\n","feature":null,"text":"原文链接 I. GET请求参数获取get请求参数，一般都是直接挂在请求的url上，所以获取这些参数还是比较简单的 1. 通过 HttpServletRequest获取参数这个可以说是最基本最常见的的方式了， javax.servlet.ServletRequest#getPara...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"}],"tags":[{"name":"注解","slug":"注解","count":3,"path":"api/tags/注解.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#I-GET%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">I. GET请求参数获取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%80%9A%E8%BF%87-HttpServletRequest%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1. 通过 HttpServletRequest获取参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%9B%B4%E6%8E%A5%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">2. 直接方法参数获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-RequestParam%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3. RequestParam注解方式获取请求参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Bean%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4. Bean方式获取参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-ModelAttribute%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">5. ModelAttribute注解方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-Path%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">6. Path参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#II-POST%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">II. POST请求参数获取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-HttpServletRequest%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1. HttpServletRequest方式获取参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">2. 方法参数获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-RequestParam%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3. RequestParam注解方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Bean%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4. Bean方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-PathVariable\"><span class=\"toc-text\">5. PathVariable</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#III-%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8A%E4%BC%A0%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">III. 多媒体上传参数获取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E4%BE%8B%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">1. 实例支持</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IV-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">IV. 小结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BA%94%E7%A7%8D%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%9A%84%E5%A7%BF%E5%8A%BF\"><span class=\"toc-text\">1. 五种获取参数的姿势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BC%A0%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF\"><span class=\"toc-text\">2. 传文件使用姿势</span></a></li></ol></li></ol>","author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBoot项目搭建 :使用Swagger2构建强大的RESTful API文档","uid":"e5e12e562a6b766ad292ef7e2566a53a","slug":"springboot-swagger2","date":"2019-05-16T05:55:51.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/springboot-swagger2.json","keywords":null,"cover":null,"text":"1. 添加Swagger2依赖 在pom.xml中加入Swagger2的依赖 &lt;!--swagger--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt; &lt;artifact...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"},{"name":"SpringBoot","slug":"java/Spring/SpringBoot","count":1,"path":"api/categories/java/Spring/SpringBoot.json"}],"tags":[],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null},"next_post":{"title":"Spring 注解 @RequestParam 的使用","uid":"de81b5153735c56c5894060bd22ba7e2","slug":"requestparam","date":"2019-05-14T06:04:05.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/requestparam.json","keywords":null,"cover":null,"text":"@RequestParam 参数加与不加的区别@RequestMapping(&quot;&#x2F;list&quot;) public String test(int userId) &#123; return &quot;list&quot;; &#125; @Reques...","link":"","photos":[],"count_time":{"symbolsCount":644,"symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"}],"tags":[{"name":"注解","slug":"注解","count":3,"path":"api/tags/注解.json"}],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null}}