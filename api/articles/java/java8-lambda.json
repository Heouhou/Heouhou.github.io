{"title":"java8新特性  Lambda","uid":"0e355bb8eab52bcceb365d2e4cf83cbf","slug":"java/java8-lambda","date":"2019-05-23T02:41:39.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/java/java8-lambda.json","keywords":null,"cover":null,"content":"<p>Lambda 的使用</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Lambda-表达式的示例\"><a href=\"#Lambda-表达式的示例\" class=\"headerlink\" title=\"Lambda 表达式的示例:\"></a>Lambda 表达式的示例:</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.example.demo.lambda;\n\nimport com.example.demo.domain.Employee;\nimport com.example.demo.service.Impl.FilterEmployeesByAge;\nimport com.example.demo.service.Impl.FilterEmployeesBySalary;\nimport com.example.demo.service.MyPredicate;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.junit.Test;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-23 10:46\n *&#x2F;\npublic class TestController &#123;\n\n\n  &#x2F;&#x2F;原来的匿名内部类\n  @Test\n  public void test1() &#123;\n    Comparator&lt;Integer&gt; comparator &#x3D; new Comparator&lt;Integer&gt;() &#123;\n      @Override\n      public int compare(Integer o1, Integer o2) &#123;\n        return Integer.compare(o2, o1);\n      &#125;\n    &#125;;\n    TreeSet&lt;Integer&gt; integers &#x3D; new TreeSet&lt;&gt;(comparator);\n    integers.add(1);\n    integers.add(3);\n    integers.add(2);\n    System.out.println(integers);\n\n  &#125;\n\n  &#x2F;&#x2F;Lambda\n  @Test\n  public void test2() &#123;\n    Comparator&lt;Integer&gt; comparator &#x3D; (x, y) -&gt; Integer.compare(y, x);\n    TreeSet&lt;Integer&gt; integers &#x3D; new TreeSet&lt;&gt;(comparator);\n    integers.add(1);\n    integers.add(3);\n    integers.add(2);\n    System.out.println(integers);\n  &#125;\n\n  &#x2F;&#x2F;需求: 获取年龄大于35的员工信息\n  List&lt;Employee&gt; employees &#x3D; Arrays.asList(\n      new Employee(&quot;张三&quot;, 18, 1999),\n      new Employee(&quot;李四&quot;, 28, 2999),\n      new Employee(&quot;王五&quot;, 38, 3999),\n      new Employee(&quot;赵六&quot;, 48, 4999)\n  );\n\n  public List&lt;Employee&gt; filterEmployeesByAge(List&lt;Employee&gt; employees) &#123;\n    List&lt;Employee&gt; resultEmployees &#x3D; new ArrayList&lt;&gt;();\n    for (Employee employee : employees) &#123;\n      if (employee.getAge() &gt; 35) &#123;\n        resultEmployees.add(employee);\n      &#125;\n    &#125;\n    return resultEmployees;\n  &#125;\n\n  @Test\n  public void test3() &#123;\n    List&lt;Employee&gt; employee &#x3D; filterEmployeesByAge(employees);\n    System.out.println(employee);\n  &#125;\n\n  &#x2F;&#x2F;需求: 获取工资大于3000的员工信息\n  public List&lt;Employee&gt; filterEmployeesBySalary(List&lt;Employee&gt; employees) &#123;\n    List&lt;Employee&gt; resultEmployees &#x3D; new ArrayList&lt;&gt;();\n    for (Employee employee : employees) &#123;\n      if (employee.getSalary() &gt; 3000) &#123;\n        resultEmployees.add(employee);\n      &#125;\n    &#125;\n    return resultEmployees;\n  &#125;\n\n  @Test\n  public void test4() &#123;\n    List&lt;Employee&gt; employee &#x3D; filterEmployeesBySalary(employees);\n    System.out.println(employee);\n  &#125;\n\n  &#x2F;&#x2F;优化方式一 : 策略设计模式\n\n  public List&lt;Employee&gt; filterEmployees(List&lt;Employee&gt; employees,\n      MyPredicate&lt;Employee&gt; myPredicate) &#123;\n    List&lt;Employee&gt; resultEmployees &#x3D; new ArrayList&lt;&gt;();\n    for (Employee employee : employees) &#123;\n      if (myPredicate.test(employee)) &#123;\n        resultEmployees.add(employee);\n      &#125;\n    &#125;\n    return resultEmployees;\n  &#125;\n\n  @Test\n  public void test5() &#123;\n    List&lt;Employee&gt; employee &#x3D; filterEmployees(employees, new FilterEmployeesByAge());\n    System.out.println(employee);\n\n    System.out.println(&quot;------------------------------&quot;);\n\n    List&lt;Employee&gt; employee2 &#x3D; filterEmployees(employees, new FilterEmployeesBySalary());\n    System.out.println(employee2);\n  &#125;\n\n  &#x2F;&#x2F;优化方式二: 匿名内部类\n  @Test\n  public void test6() &#123;\n    List&lt;Employee&gt; employees &#x3D; filterEmployees(this.employees, new MyPredicate&lt;Employee&gt;() &#123;\n          @Override\n          public Boolean test(Employee employee) &#123;\n            return employee.getSalary() &lt; 2000;\n          &#125;\n        &#125;\n    );\n    System.out.println(employees);\n  &#125;\n\n  &#x2F;&#x2F;优化方式三:匿名内部类\n  @Test\n  public void test7() &#123;\n\n    List&lt;Employee&gt; employees &#x3D; filterEmployees(this.employees, (x) -&gt; x.getSalary() &lt; 2000);\n    System.out.println(employees);\n  &#125;\n\n  &#x2F;&#x2F;优化方式四:Stream API\n  @Test\n  public void test8() &#123;\n    employees.stream()\n        .filter((x) -&gt; x.getSalary() &lt; 2000)\n        .forEach(System.out::println);\n  &#125;\n\n&#125;\n\n&#x2F;&#x2F;实体对象\npackage com.example.demo.domain;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-22 14:26\n *&#x2F;\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Employee &#123;\n\n  private String name;\n  private int age;\n  private int salary;\n\n&#125;\n\n\n&#x2F;&#x2F;接口\n\npackage com.example.demo.service;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-23 11:12\n *&#x2F;\npublic interface MyPredicate&lt;T&gt; &#123;\n\n  Boolean test(T t);\n\n&#125;\n\n\npackage com.example.demo.service.impl;\n\nimport com.example.demo.domain.Employee;\nimport com.example.demo.service.MyPredicate;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-23 11:21\n *&#x2F;\npublic class FilterEmployeesByAge implements MyPredicate&lt;Employee&gt; &#123;\n\n  @Override\n  public Boolean test(Employee employee) &#123;\n    return employee.getAge() &gt; 35;\n  &#125;\n&#125;\n\n&#x2F;&#x2F;实现方法\npackage com.example.demo.service.impl;\n\nimport com.example.demo.domain.Employee;\nimport com.example.demo.service.MyPredicate;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-23 11:21\n *&#x2F;\npublic class FilterEmployeesByAge implements MyPredicate&lt;Employee&gt; &#123;\n\n  @Override\n  public Boolean test(Employee employee) &#123;\n    return employee.getAge() &gt; 35;\n  &#125;\n&#125;\n\npackage com.example.demo.service.impl;\n\n    import com.example.demo.domain.Employee;\n    import com.example.demo.service.MyPredicate;\n\n&#x2F;**\n * @author houqingxin\n * @Description:\n * @date 2019-05-23 11:37\n *&#x2F;\npublic class FilterEmployeesBySalary implements MyPredicate&lt;Employee&gt; &#123;\n\n  @Override\n  public Boolean test(Employee employee) &#123;\n    return employee.getSalary() &lt; 3500;\n  &#125;\n\n&#125;\n\n</code></pre>\n\n\n<h3 id=\"Lambda-表达式的基本语法\"><a href=\"#Lambda-表达式的基本语法\" class=\"headerlink\" title=\"Lambda 表达式的基本语法\"></a>Lambda 表达式的基本语法</h3><pre><code>java8中引用了一个新的操作符&quot;-&gt;&quot; 该操作符称为箭头操作符 或Lambda操作符\n箭头操作符将Lambda表达式拆分成两部分:\n左侧: Lambda 表达式的参数列表\n右侧: Lambda 表达式中所需执行的功能,即Lambda 体\n</code></pre>\n<h4 id=\"1-语法格式一-无参-无返回值\"><a href=\"#1-语法格式一-无参-无返回值\" class=\"headerlink\" title=\"1. 语法格式一: 无参,无返回值\"></a>1. 语法格式一: 无参,无返回值</h4><pre><code>()-&gt;System.out.println(&quot;Hello Lambda&quot;);\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test1() &#123;\n  Runnable runnable &#x3D; () -&gt; System.out.println(&quot;Hello Lambda!&quot;);\n  runnable.run();\n&#125;</code></pre>\n\n\n\n<h4 id=\"2-语法格式二-有一个参数-无返回值-若只有一个参数-小括号可省略不写\"><a href=\"#2-语法格式二-有一个参数-无返回值-若只有一个参数-小括号可省略不写\" class=\"headerlink\" title=\"2. 语法格式二: 有一个参数 ,无返回值 (若只有一个参数,小括号可省略不写)\"></a>2. 语法格式二: 有一个参数 ,无返回值 (若只有一个参数,小括号可省略不写)</h4><pre><code>(x)-&gt;System.out.println(x);\nx-&gt;System.out.println(x);\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test2() &#123;\n    Consumer&lt;String&gt; consumer &#x3D; x -&gt; System.out.println(x);\n    consumer.accept(&quot;测试&quot;);\n&#125;</code></pre>\n\n<h4 id=\"3-语法格式三-有两个以上参数-有返回值-并且Lambda体中有多条语句\"><a href=\"#3-语法格式三-有两个以上参数-有返回值-并且Lambda体中有多条语句\" class=\"headerlink\" title=\"3. 语法格式三: 有两个以上参数,有返回值,并且Lambda体中有多条语句\"></a>3. 语法格式三: 有两个以上参数,有返回值,并且Lambda体中有多条语句</h4><pre><code>Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;\n  System.out.println(&quot;--------&quot;);\n  return Integer.compare(x, y);\n&#125;;\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test3() &#123;\n  Comparator&lt;Integer&gt; comparator &#x3D; (x, y) -&gt; &#123;\n    System.out.println(&quot;--------&quot;);\n    return Integer.compare(x, y);\n  &#125;;\n  int result &#x3D; comparator.compare(17, 11);\n  System.out.println(result);\n&#125;</code></pre>\n\n\n\n<h4 id=\"4-语法格式四-若Lambda-体中只有一条语句-return-和大括号都可以不写\"><a href=\"#4-语法格式四-若Lambda-体中只有一条语句-return-和大括号都可以不写\" class=\"headerlink\" title=\"4.语法格式四: 若Lambda 体中只有一条语句,return 和大括号都可以不写\"></a>4.语法格式四: 若Lambda 体中只有一条语句,return 和大括号都可以不写</h4><pre><code>Comparator&lt;Integer&gt; comparator = (x, y) -&gt;Integer.compare(x, y);\n</code></pre>\n<h4 id=\"5-语法格式五-Lamba-表达式的参数列表的数据类型可以省略不写-因为JVM编译器通过上下文推断出-数据类型-即”类型推断”\"><a href=\"#5-语法格式五-Lamba-表达式的参数列表的数据类型可以省略不写-因为JVM编译器通过上下文推断出-数据类型-即”类型推断”\" class=\"headerlink\" title=\"5. 语法格式五:  Lamba 表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型,即”类型推断”.\"></a>5. 语法格式五:  Lamba 表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型,即”类型推断”.</h4><h3 id=\"Java8-内置四大核心函数式接口\"><a href=\"#Java8-内置四大核心函数式接口\" class=\"headerlink\" title=\"Java8 内置四大核心函数式接口\"></a>Java8 内置四大核心函数式接口</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n  * Java8内置的四大核心函数式接口\n  * &lt;p&gt;\n  * Consumer&lt;T&gt;: 消费型接口\n  * void accept(T t);\n  *\n  * Supplier&lt;T&gt;:供给型接口\n  * T get();\n  *\n  * Function&lt;T, R&gt;: 函数型接口\n  * R apply(T t);\n  *\n  * Predicate&lt;T&gt;: 断言型接口:\n  * boolean test(T t);\n  *\n  *Java8中还提供了其他函数式接口\n*&#x2F;</code></pre>\n\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用:\"></a>方法引用:</h3><p> 若Lambda 体中的内容有方法已经实现了,我们可以使用”方法引用”<br>    (可以理解为方法引用是Lambda 表达式的另外一种表现形式)<br>    主要有三种语法格式:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:Lambda 体中调用方法的参数列表和返回值类型,要与函数式接口中抽象方法的函数列表和返回值类型保持一致</p></blockquote>\n<pre><code>①对象::实例方法名\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test4() &#123;\n  PrintStream out &#x3D; System.out;\n  Consumer&lt;String&gt; consumer &#x3D; x -&gt; out.println(x);\n  Consumer&lt;String&gt; consumer1 &#x3D; out::println;\n  consumer.accept(&quot;测试1&quot;);\n  consumer1.accept(&quot;测试2&quot;);\n&#125;\n\n@Test\npublic void test5() &#123;\n  Employee employee &#x3D; new Employee();\n  employee.setName(&quot;hah&quot;);\n  Supplier&lt;String&gt; stringSupplier &#x3D; () -&gt; employee.getName();\n  String s &#x3D; stringSupplier.get();\n  System.out.println(s);\n  Supplier&lt;String&gt; getName &#x3D; employee::getName;\n  String s1 &#x3D; getName.get();\n  System.out.println(s1);\n\n&#125;</code></pre>\n\n<pre><code>②类::静态方法名\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test6() &#123;\n  Comparator&lt;Integer&gt; comparator &#x3D; (x, y) -&gt; Integer.compare(x, y);\n  Comparator&lt;Integer&gt; comparator1 &#x3D; Integer::compare;\n&#125;</code></pre>\n\n<pre><code>③类::实例方法名\n若 Lambda 参数列表中的第一参数是实例方法的调用者,而第二个参数是实例方法的参数时,可以使用\nClassName::method\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n public void test7() &#123;\n   BiPredicate&lt;String, String&gt; biPredicate &#x3D; (x, y) -&gt; x.equals(y);\n   BiPredicate&lt;String, String&gt; biPredicate1 &#x3D; String::equals;\n &#125;</code></pre>\n<h3 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h3><pre><code>格式:\nClassName::new\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:<br>需要调用的构造器的参数列表要与函数式接口中的抽象方法参数列表保持一致</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test8() &#123;\n  Supplier&lt;Employee&gt; stringSupplier &#x3D; () -&gt; new Employee();\n  Supplier&lt;Employee&gt; stringSupplier2 &#x3D; Employee::new;\n&#125;\n\n@Test\npublic void test9() &#123;\n  Function&lt;Integer, Employee&gt; function &#x3D; (x) -&gt; new Employee(x);\n  Function&lt;Integer, Employee&gt; function1 &#x3D; Employee::new;\n&#125;</code></pre>\n\n<h3 id=\"数组引用\"><a href=\"#数组引用\" class=\"headerlink\" title=\"数组引用\"></a>数组引用</h3><pre><code>Type[]::new\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n public void test10() &#123;\n   Function&lt;Integer, String[]&gt; function &#x3D; (x) -&gt; new String[x];\n   Function&lt;Integer, String[]&gt; function1 &#x3D; String[]::new;\n &#125;</code></pre>","feature":null,"text":"Lambda 的使用 Lambda 表达式的示例:package com.example.demo.lambda; import com.example.demo.domain.Employee; import com.example.demo.service.Impl.Filt...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"}],"tags":[{"name":"Lambda","slug":"Lambda","count":1,"path":"api/tags/Lambda.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">Lambda 表达式的示例:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">Lambda 表达式的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%B8%80-%E6%97%A0%E5%8F%82-%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">1. 语法格式一: 无参,无返回值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%BA%8C-%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0-%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC-%E8%8B%A5%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0-%E5%B0%8F%E6%8B%AC%E5%8F%B7%E5%8F%AF%E7%9C%81%E7%95%A5%E4%B8%8D%E5%86%99\"><span class=\"toc-text\">2. 语法格式二: 有一个参数 ,无返回值 (若只有一个参数,小括号可省略不写)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%B8%89-%E6%9C%89%E4%B8%A4%E4%B8%AA%E4%BB%A5%E4%B8%8A%E5%8F%82%E6%95%B0-%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC-%E5%B9%B6%E4%B8%94Lambda%E4%BD%93%E4%B8%AD%E6%9C%89%E5%A4%9A%E6%9D%A1%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3. 语法格式三: 有两个以上参数,有返回值,并且Lambda体中有多条语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E5%9B%9B-%E8%8B%A5Lambda-%E4%BD%93%E4%B8%AD%E5%8F%AA%E6%9C%89%E4%B8%80%E6%9D%A1%E8%AF%AD%E5%8F%A5-return-%E5%92%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7%E9%83%BD%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%86%99\"><span class=\"toc-text\">4.语法格式四: 若Lambda 体中只有一条语句,return 和大括号都可以不写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E4%BA%94-Lamba-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E4%B8%8D%E5%86%99-%E5%9B%A0%E4%B8%BAJVM%E7%BC%96%E8%AF%91%E5%99%A8%E9%80%9A%E8%BF%87%E4%B8%8A%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD%E5%87%BA-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%8D%B3%E2%80%9D%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E2%80%9D\"><span class=\"toc-text\">5. 语法格式五:  Lamba 表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型,即”类型推断”.</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java8-%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Java8 内置四大核心函数式接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">方法引用:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">构造器引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">数组引用</span></a></li></ol>","author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"mapped":true,"prev_post":{"title":"linux下常用FTP命令","uid":"04e053ae2c75962b1f5ddfabcc8b2f71","slug":"linux/linux-ftp","date":"2019-06-04T02:11:47.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/linux/linux-ftp.json","keywords":null,"cover":null,"text":"1.连接Ftpftp 地址 端口 ftp 222.190.111.146 19001 然后输入账号输入密码 2. 退出bye ","link":"","photos":[],"count_time":{"symbolsCount":63,"symbolsTime":"1 mins."},"categories":[{"name":"LINUX","slug":"LINUX","count":2,"path":"api/categories/LINUX.json"}],"tags":[{"name":"LINUX","slug":"LINUX","count":2,"path":"api/tags/LINUX.json"},{"name":"FTP","slug":"FTP","count":1,"path":"api/tags/FTP.json"}],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null},"next_post":{"title":"SpringBoot项目搭建 :使用Swagger2构建强大的RESTful API文档","uid":"e5e12e562a6b766ad292ef7e2566a53a","slug":"springboot-swagger2","date":"2019-05-16T05:55:51.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/springboot-swagger2.json","keywords":null,"cover":null,"text":"1. 添加Swagger2依赖 在pom.xml中加入Swagger2的依赖 &lt;!--swagger--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt; &lt;artifact...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"},{"name":"SpringBoot","slug":"java/Spring/SpringBoot","count":1,"path":"api/categories/java/Spring/SpringBoot.json"}],"tags":[],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null}}