{"title":"SpringBoot项目搭建 :使用Swagger2构建强大的RESTful API文档","uid":"e5e12e562a6b766ad292ef7e2566a53a","slug":"springboot-swagger2","date":"2019-05-16T05:55:51.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/springboot-swagger2.json","keywords":null,"cover":null,"content":"<h3 id=\"1-添加Swagger2依赖\"><a href=\"#1-添加Swagger2依赖\" class=\"headerlink\" title=\"1. 添加Swagger2依赖\"></a>1. 添加Swagger2依赖</h3><p> 在pom.xml中加入Swagger2的依赖</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--swagger--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"2-创建Swagger2配置类\"><a href=\"#2-创建Swagger2配置类\" class=\"headerlink\" title=\"2. 创建Swagger2配置类\"></a>2. 创建Swagger2配置类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableSwagger2\npublic class SwaggerConfig &#123;\n\n  @Value(value &#x3D; &quot;$&#123;swagger.enabled&#125;&quot;)\n  Boolean swaggerEnabled;\n\n  @Bean\n  public Docket createRestApi() &#123;\n   &#x2F;* ParameterBuilder tokenParam &#x3D; new ParameterBuilder();\n    List&lt;Parameter&gt; params &#x3D; new ArrayList&lt;&gt;();\n    tokenParam.name(&quot;Authorization&quot;).description(&quot;令牌Token&quot;).modelRef(new ModelRef(&quot;string&quot;))\n        .parameterType(&quot;header&quot;).required(false).build();\n    params.add(tokenParam.build());*&#x2F;\n\n    return new Docket(DocumentationType.SWAGGER_2)\n        .groupName(&quot;v1.0&quot;)\n        .apiInfo(apiInfo())\n        .enable(swaggerEnabled)\n        .select()\n        .apis(RequestHandlerSelectors.basePackage(&quot;com.example.demo&quot;))\n        .paths(PathSelectors.any())\n        .build()\n        .pathMapping(&quot;&quot;);\n  &#125;\n\n  private ApiInfo apiInfo() &#123;\n    return new ApiInfoBuilder()\n        .title(&quot;SpringBootDemo-API&quot;)\n        .description(&quot;SpringBoot项目搭建&quot;)\n        .contact(new Contact(&quot;hou&quot;, &quot;www.buhaoji.top&quot;, &quot;843882065@qq.com&quot;))\n        .version(&quot;1.0.0&quot;)\n        .build();\n  &#125;\n\n&#125;</code></pre>\n<p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。<br><br>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p>\n<h3 id=\"3-添加文档内容\"><a href=\"#3-添加文档内容\" class=\"headerlink\" title=\"3. 添加文档内容\"></a>3. 添加文档内容</h3><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p>\n<p>&#x2F;&#x2F;TODO</p>\n<h3 id=\"4-swagger-相关注解\"><a href=\"#4-swagger-相关注解\" class=\"headerlink\" title=\"4.swagger 相关注解\"></a>4.swagger 相关注解</h3><h3 id=\"5-swagger-分组\"><a href=\"#5-swagger-分组\" class=\"headerlink\" title=\"5.swagger 分组\"></a>5.swagger 分组</h3>","feature":null,"text":"1. 添加Swagger2依赖 在pom.xml中加入Swagger2的依赖 &lt;!--swagger--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt; &lt;artifact...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"},{"name":"SpringBoot","slug":"java/Spring/SpringBoot","count":1,"path":"api/categories/java/Spring/SpringBoot.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B7%BB%E5%8A%A0Swagger2%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1. 添加Swagger2依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BASwagger2%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">2. 创建Swagger2配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B7%BB%E5%8A%A0%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">3. 添加文档内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-swagger-%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">4.swagger 相关注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-swagger-%E5%88%86%E7%BB%84\"><span class=\"toc-text\">5.swagger 分组</span></a></li></ol>","author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"mapped":true,"prev_post":{"title":"java8新特性  Lambda","uid":"0e355bb8eab52bcceb365d2e4cf83cbf","slug":"java8-lambda","date":"2019-05-23T02:41:39.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/java8-lambda.json","keywords":null,"cover":null,"text":"Lambda 的使用 Lambda 表达式的示例:package com.example.demo.lambda; import com.example.demo.domain.Employee; import com.example.demo.service.Impl.Filt...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"}],"tags":[{"name":"Lambda","slug":"Lambda","count":1,"path":"api/tags/Lambda.json"}],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null},"next_post":{"title":"SpringMVC之请求参数的获取方式","uid":"c7433ee36363ab590f7e0ac5e549f564","slug":"springmvc-request","date":"2019-05-15T09:33:12.000Z","updated":"2019-06-04T02:42:13.000Z","comments":true,"path":"api/articles/springmvc-request.json","keywords":null,"cover":null,"text":"原文链接 I. GET请求参数获取get请求参数，一般都是直接挂在请求的url上，所以获取这些参数还是比较简单的 1. 通过 HttpServletRequest获取参数这个可以说是最基本最常见的的方式了， javax.servlet.ServletRequest#getPara...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"java","slug":"java","count":5,"path":"api/categories/java.json"},{"name":"Spring","slug":"java/Spring","count":4,"path":"api/categories/java/Spring.json"}],"tags":[{"name":"注解","slug":"注解","count":3,"path":"api/tags/注解.json"}],"author":{"name":"HeouHou","slug":"blog-author","avatar":"https://z4a.net/images/2022/08/29/v2-bf1fa03daf95cd63015f7901fe11efe7_r.jpg","link":"https://github.com/Heouhou","description":"每天进步一点点 <br /> @ <b>GitHub：HeouHou</b>","socials":{"github":"https://github.com/Heouhou","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/shan-jie-ren-yi-52","csdn":"https://blog.csdn.net/liaomiqian6384","juejin":"https://juejin.cn/user/4121442162316455","customs":{}}},"feature":null}}